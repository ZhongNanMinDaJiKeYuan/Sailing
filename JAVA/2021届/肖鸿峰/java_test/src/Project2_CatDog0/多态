1.同一个对象在不同时刻表现出的不同形态
猫 cat = new 猫()
动物 animal = new 猫()
猫可以是猫，亦可以是动物

多态前提：
*有继承/实现关系
*有方法重写
*有父类引用指向子类成员： Animal c1 = new Cat();

2.成员访问特点
访问时看父类，父类中必须有，否则会报错

3.多态转型
*向上转型：父类引用指向子类（弊端：不能访问子类的特有功能）
Animal a = new Cat();

*向下转型：父类引用转为子类对象
Cat c = (Cat)a;
